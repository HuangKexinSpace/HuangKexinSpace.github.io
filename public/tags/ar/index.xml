<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AR on Kexin&#39;s Blog</title>
    <link>http://localhost:1313/tags/ar/</link>
    <description>Recent content in AR on Kexin&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Athul</copyright>
    <lastBuildDate>Sat, 15 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ar/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Super Teacher （202410 - prsent）</title>
      <link>http://localhost:1313/projects/superteacher/</link>
      <pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/superteacher/</guid>
      <description>状态 - 建设中 </description>
    </item>
    <item>
      <title>Develop - RayNeoX2_03_脚本功能描述-Slam,退出应用</title>
      <link>http://localhost:1313/posts/deployment_web/rayneox2_03_%E8%84%9A%E6%9C%AC%E5%8A%9F%E8%83%BD%E6%8F%8F%E8%BF%B0/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/deployment_web/rayneox2_03_%E8%84%9A%E6%9C%AC%E5%8A%9F%E8%83%BD%E6%8F%8F%E8%BF%B0/</guid>
      <description>Slam Demo 内置脚本描述 GameObject double Tab Back Scene Ctrl using RayNeo; using UnityEngine; using UnityEngine.InputSystem; using UnityEngine.SceneManagement; public class DoubleTabBackSceneCtrl : MonoBehaviour { //构造了一个方法，双击就退出到“Entry”场景 public void OnDoubleTapCallBack() { //加载”Entry“场景 SceneManager.LoadScene(&amp;#34;Entry&amp;#34;); } void Start() { //这句是为双击添加监听器，当触发双击后执行OnDoubleCallBAck这个函数 SimpleTouch.Instance.OnDoubleTap.AddListener(OnDoubleTapCallBack); } private void OnDestroy() { //移除监视器的常规操作 if (SimpleTouch.SingletonExist) { SimpleTouch.Instance.OnDoubleTap.RemoveListener(OnDoubleTapCallBack); } } } 功能：双击返回“Entry”场景 用法：挂载到空的GameObject上&#xA;SlamDemoCtrl 空Object 位置000 Slam Demo Ctrl using RayNeo.API; using UnityEngine; public class SlamDemoCtrl : MonoBehaviour { public GameObject m_Cube; public int m_LineCount = 10; public float m_CubeSpace = 0.</description>
    </item>
    <item>
      <title>Develop - RayNeoX2_01_环境配置</title>
      <link>http://localhost:1313/posts/deployment_web/rayneox2_01_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/deployment_web/rayneox2_01_%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>官方文档 开发手册： 环境配置 参考教程： 官方文档 - OpenXR Unity ARDK - 最新 - 快速开始 - 开发环境搭建 （上述文档写的比较清晰，可以一步一步按照上述文档配，下面是我的配置记录） 安装Unity版本，安装时勾选 andriod build support，如果没勾选也可以安装后在设置的add mdules里再安装。 （推荐22.3.42f1或者2022.3.44f1 ，其他好几个版本都报错了） 创建3d core template 导入雷鸟sdk - 我选择安装包导入，也可以根据文档的从git中导入。 安装包链接（第二个） 导入成功后会提示重启，自动重启后如果控制台报错，再关掉unity再重启，如果还报错，大概率可能会是unity版本不兼容&amp;hellip;..如果不报错，就继续🏃‍♀️ 设置打包到安卓平台 点switch platform 环境配置 edit - project setting Player - other settings identification 勾选 重写包名 XR Plug- in Management - 安卓平台下 勾选OpenXR和RayNeo XR feature group 然后点击红色感叹号。 点击fix all Open XR - RayNeo Support 的设置 - 关掉ATW support 其他设置（必须） Project setting - player - publish setting -build -勾选custom main manifest 随后可在Unity&amp;gt;Project&amp;gt;Plugin&amp;gt;Android 文件夹下，找到自动生成的AndroidManifest.</description>
    </item>
    <item>
      <title>Develop - RayNeoX2_02_Demo初探、6dof</title>
      <link>http://localhost:1313/posts/deployment_web/rayneox2_02_demo%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/deployment_web/rayneox2_02_demo%E5%88%9D%E6%8E%A2/</guid>
      <description>Refer 官方文档 RayNeoX2_01_环境配置 构建第一个XR应用 Follow： 官方文档 - OpenXR Unity ARDK -最新 - 快速开始 - 构建第一个XR应用 添加XR Plugin 预制体 新建场景，最上方导航点Asstes - Create - Scene，新建的Scene（任何其他的东西）都会出现在Project的Assets文件夹中，然后我们把新建的这个New Scene拖到Hiearchy栏下。 在Unity中，Project下的Assets相当于仓库中的原料，把Assete中的东西从Project拖到Hierarchy上，就像是把原料摆到操作台上，而Scene/Game的视窗就是看看当前操作台上的东西长什么样子。 把New Scene中的Main Camera，Directional&#x9;light删除。 (然后就是一步一步跟着文档操作，我这里记录一些文档可能没有细节的步骤) 添加按钮和输入框 2. 配置Canvas 需要删除canvas下原有Graphic Raycaster,并添加我们的XRGraphicRaycaster 打包及投屏测试可以参考 RayNeoX2_01_环境配置 6dof功能 目前我的理解： Unity中必须要有相机，如果只是3D游戏，那么就用的是Unity内置的Camera。但XR设备总是有自己的摄像头的，因此它们通常需要自己的相机接口，所以每个XR设备的相机都不一样，我们需要看它们的官方文档，如何去调用相机。 而相机的视角和模式又与设计的需求息息相关，我们希望相机跟随人的头运动，还是固定视角？希望一个物体一直离我们保持一定的距离，还是我可以靠近它，走近它，这就需要看文档，去如何设置相机。 目前从“构建第一个XR应用”中发现，雷鸟的camera就是在XR Plugin中。 目前就是看Samples中的代码，看它6dof的实现代码。 </description>
    </item>
  </channel>
</rss>
